#!/bin/sh

# Welcome to the laptop script!
# Be prepared to turn your laptop (or desktop)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_file() {
  local file="$1"
  local text="$2"

  if [ "$file" = "$HOME/.zshrc" ]; then
    if [ -w "$HOME/.zshrc.local" ]; then
      file="$HOME/.zshrc.local"
    else
      file="$HOME/.zshrc"
    fi
  fi

  if ! grep -qs "^$text$" "$file"; then
    printf "\n%s\n" "$text" >> "$file"
  fi
}

brew_is_installed() {
  brew list -1 | grep -Fqx "$1"
}

gem_install_or_update() {
  if gem list "$1" | grep "^$1 ("; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

app_is_installed() {
  local app_name
  app_name=$(echo "$1" | cut -d'-' -f1)
  find /Applications -iname "$app_name*" -maxdepth 1 | egrep '.*' > /dev/null
}

install_node() {
  fancy_echo "Installing Nodejs..."
  if ! command -v node > /dev/null; then
    fancy_echo 'Installing volta and latest LTS Node.js and npm'
    # install volta
    curl https://get.volta.sh | bash
    # install node
    volta install node
  else
    fancy_echo 'Node already installed. Skipping ...'
  fi
}

install_ruby() {
  append_to_file "$HOME/.gemrc" 'gem: --no-document'

  if ! command -v rbenv >/dev/null; then
    if ! command -v rvm >/dev/null; then
      fancy_echo 'Installing RVM and the latest Ruby...'
      curl -L https://get.rvm.io | bash -s stable --ruby --auto-dotfiles --autolibs=enable
      . ~/.rvm/scripts/rvm
    else
      local_version="$(rvm -v 2> /dev/null | awk '$2 != ""{print $2}')"
      latest_version="$(curl -s https://raw.githubusercontent.com/rvm/rvm/stable/VERSION)"
      if [ "$local_version" != "$latest_version" ]; then
        fancy_echo 'Upgrading RVM...'
        rvm get stable --auto-dotfiles --autolibs=enable --with-gems="bundler"
      else
        fancy_echo "Already using the latest version of RVM. Skipping..."
      fi
    fi
  fi

  fancy_echo 'Updating Rubygems...'
  gem update --system

  gem_install_or_update 'bundler'

  fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

  append_to_file "$HOME/.rvmrc" 'rvm_auto_reload_flag=2'
  append_to_file "$HOME/.rvm/gemsets/global.gems" 'bundler'
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_file "$HOME/.zshrc" 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
  curl -fsS \
    'https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh' | bash

  # shellcheck disable=SC2016
  append_to_file "$HOME/.zshrc" 'export PATH="/usr/local/bin:$PATH"'
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew cleanup

fancy_echo "Verifying the Homebrew installation..."
if brew doctor; then
  fancy_echo "Your Homebrew installation is good to go."
else
  fancy_echo "Your Homebrew installation reported some errors or warnings."
  echo "If the warnings are related to Python, you can ignore them."
  echo "Otherwise, review the Homebrew messages to see if any action is needed."
fi

fancy_echo "Installing formulas and casks ..."
brew bundle --file=- <<EOF
cask_args appdir: '/Applications'
# Unix
brew 'ctags'
brew 'git'
brew 'openssl'
brew 'reattach-to-user-namespace'
brew 'selecta'
brew 'the_silver_searcher'
brew 'tmux'
brew 'tree'
brew 'vim'
brew 'gh'
brew 'zsh-syntax-highlighting'
# Image manipulation
brew 'imagemagick'
# Programming languages
brew 'libyaml' # should come after openssl
brew 'yarn'
# Databases
brew 'redis', restart_service: true
EOF

read -p "Do you want to install Node.js? [Y/n] " yn
if [[ $yn =~ ^[Yy] ]]; then
  install_node
fi

read -p "Do you want to install Ruby? [Y/n] " yn
if [[ $yn =~ ^[Yy] ]]; then
  install_ruby
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi

fancy_echo 'All done!'
